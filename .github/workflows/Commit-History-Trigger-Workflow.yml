name: Commit History Mapping Workflow

on:
  workflow_dispatch:

permissions:
  contents: write
  actions: write

jobs:
  # Step 1: Prepare Job
  prepare:
    runs-on: ubuntu-latest

    outputs:
      repo_name: "mannequin"
      repo_org: "Skanchi09"
      target_org: "Skanchi09"

    steps:
      - name: Set Outputs
        run: |
          echo "repo_name=mannequin" >> $GITHUB_ENV
          echo "repo_org=Skanchi09" >> $GITHUB_ENV
          echo "target_org=Skanchi09" >> $GITHUB_ENV

  # Step 2: Migrate Job
  migrate:
    runs-on: ubuntu-latest
    needs: [prepare]

    outputs:
      repo_name: ${{ needs.prepare.outputs.repo_name }}
      repo_org: ${{ needs.prepare.outputs.repo_org }}
      target_org: ${{ needs.prepare.outputs.target_org }}

    steps:
      - name: Print Variables
        run: |
          echo "Repository Name: ${{ needs.prepare.outputs.repo_name }}"
          echo "Repository Org: ${{ needs.prepare.outputs.repo_org }}"
          echo "Target Org: ${{ needs.prepare.outputs.target_org }}"

      - name: Validate Migration Readiness
        run: echo "Migration Validation Complete!"

  # Step 3: Commit History Mapping Job
  Commit-history-mapping:
    runs-on: ubuntu-latest
    needs: [prepare, migrate]

    steps:
      - name: Print Variables
        run: |
          echo "Repository Name: ${{ needs.migrate.outputs.repo_name }}"
          echo "Repository Org: ${{ needs.migrate.outputs.repo_org }}"
          echo "Target Org: ${{ needs.migrate.outputs.target_org }}"

      - name: Trigger Commit-history-mapping in Target
        uses: peter-evans/repository-dispatch@v1
        with:
          token: ${{ secrets.MY_TOKEN }}
          event-type: Commit-history-mapping-updated
          client-payload: |
            {
              "repo_name": "${{ needs.migrate.outputs.repo_name }}",
              "repo_org": "${{ needs.migrate.outputs.repo_org }}",
              "target_org": "${{ needs.migrate.outputs.target_org }}"
            }

      - name: Wait for Triggered Workflow to Start
        id: wait
        run: |
          echo "Checking for the triggered workflow to start..."
          sleep 10

      - name: Get Triggered Workflow Run ID
        id: get-run-id
        uses: actions/github-script@v6
        with:
          script: |
            // Define the API endpoint and token
            const repo = process.env.GITHUB_REPOSITORY;
            const token = process.env.GITHUB_TOKEN;
            const workflowRunUrl = `https://api.github.com/repos/${repo}/actions/runs`;
      
            // Fetch workflow runs using the native 'fetch' provided by github-script
            const response = await fetch(workflowRunUrl, {
              headers: { Authorization: `Bearer ${token}` },
            });
      
            if (!response.ok) {
              core.setFailed(`Failed to fetch workflow runs: ${response.status} ${response.statusText}`);
              return;
            }
      
            const runs = await response.json();
      
            // Find the latest workflow run triggered by repository_dispatch
            const triggeredRun = runs.workflow_runs.find(
              (run) =>
                run.event === "repository_dispatch" &&
                run.status !== "completed"
            );
      
            if (!triggeredRun) {
              core.setFailed("No triggered workflow found or it has already completed.");
            } else {
              console.log(`Triggered Workflow URL: ${triggeredRun.html_url}`);
              core.setOutput("run_id", triggeredRun.id);
              core.setOutput("workflow_url", triggeredRun.html_url);
            }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


      # Step 4: Monitor the triggered workflow
      - name: Monitor Triggered Workflow
        run: |
          RUN_ID=${{ steps.get-run-id.outputs.run_id }}
          echo "Monitoring Workflow Run ID: $RUN_ID"
          while true; do
            # Check the status of the triggered workflow
            STATUS=$(gh api repos/${{ github.repository }}/actions/runs/$RUN_ID --jq .status)
            echo "Current Status: $STATUS"

            if [[ "$STATUS" == "completed" ]]; then
              # If completed, check the conclusion
              CONCLUSION=$(gh api repos/${{ github.repository }}/actions/runs/$RUN_ID --jq .conclusion)
              echo "Workflow Completed with Conclusion: $CONCLUSION"

              if [[ "$CONCLUSION" == "success" ]]; then
                echo "Triggered workflow succeeded!"
                exit 0
              else
                echo "Triggered workflow failed!"
                exit 1
              fi
            fi

            # Wait before checking again
            sleep 10
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Step 5: Proceed to the next step if the triggered workflow succeeds
      - name: Proceed to Next Job
        run: echo "Triggered workflow succeeded. Proceeding to the next steps!"
